	function get_EncounterValues() {
		var partySize = document.getElementById("partySize").value;
		var partyLevel = document.getElementById("partyLevel").value;
		var mDifficulty = document.getElementById("monsterDiff").value;
		var mAlignmentOne = document.getElementById("monsterAlignOne").value;
		var mAlignmentTwo = document.getElementById("monsterAlignTwo").value;
		var mSize = document.getElementById("monsterSize").value;
		var mType = document.getElementById("monsterType").value;
		var mEnvi = document.getElementById("monsterEnvi").value;
		
		
		document.getElementById("encounterCanvas").innerHTML = document.getElementById("main").innerHTML;
		
		console.log("Party Size: " + partySize);
		console.log("Party Level: " +partyLevel);
		console.log("Difficulty: " +mDifficulty);
		console.log("Align 1: " +mAlignmentOne);
		console.log("Align 2: " +mAlignmentTwo);
		console.log("Size: " +mSize);
		console.log("Type: " +mType);
		console.log("Environment: " +mEnvi);
		
		
		var players = partySize;
		var level = partyLevel;

		var align1 = mAlignmentOne;
		var align2 = mAlignmentTwo;

		var difficulty = mDifficulty;
		var alignment = convertAlignment(align1,align2);
		var size = mSize;
		var type = mType;
		var environment = mEnvi;

        const db = firebase.database();
        const Monsters = db.ref().child('Monsters');

		var CRrange = CalculateChallenge(difficulty,players,level);

        var generated;
        var genName;
        var genCR;
        var genXP;
        var genPage;
        var filtered = [];

        if (difficulty == "Any") {
            Monsters.once('value')
                .then(function (snapshot) {
                    snapshot.forEach(function (childSnapshot) {
                        filtered.push(childSnapshot.val());
                    });
                    console.log("by challenge: " + filtered.length);

                    var filterSize = [];
                    if(size !== "Any"){
                        for(var i = 0; i < filtered.length; i++){
                            if(filtered[i].Size == size){
                                filterSize.push(filtered[i]);
                            }
                        }
                    }
                    else{
                        filterSize = filtered;
                    }
                    console.log("by size: " + filterSize.length);

                    var filterType = [];
                    if(type != "Any"){
                        for(var i = 0; i < filterSize.length; i++){
                            if(filterSize[i].Type == type){
                                filterType.push(filterSize[i]);
                            }
                        }
                    }
                    else{
                        filterType = filterSize;
                    }
                    console.log("by type: " + filterType.length);

                    console.log(alignment);
                    var filterAlignment = [];
                    if(alignment !== "Any" && alignment !== "Any evil" && alignment !== "Any good" && alignment !== "Any neutral"
                        && alignment !== "Lawful Any" && alignment !== "Chaotic Any" && alignment !== "Neutral Any"){
                        console.log("in if");
                        for(var i = 0; i < filterType.length; i++){
                            if(filterType[i].Alignment == alignment){
                                filterAlignment.push(filterType[i]);
                            }
                        }
                    }
                    else if(alignment == "Any evil" || alignment == "Any good" || alignment == "Any neutral"){
                        var set;
                        console.log("in else1");
                        if(align2 == "Good"){
                            set = ["CG","NG","LG","any good"];
                        }
                        else if(align2 == "Evil"){
                            set = ["CE","NE","LE","Any evil"];
                        }
                        else if(align2 == "Neutral"){
                            set = ["CN","Unaligned","LN","N"];
                        }
                        for(var i = 0; i < filterType.length; i++){
                            if(filterType[i].Alignment == set[0] || filterType[i].Alignment == set[1] || filterType[i].Alignment == set[2] || filterType[i].Alignment == set[3]){
                                filterAlignment.push(filterType[i]);
                            }
                        }
                    }
                    else if(alignment == "Lawful Any" || alignment == "Chaotic Any" || alignment == "Neutral Any") {
                        var set;
                        console.log("in else2");
                        if (align1 == "Lawful") {
                            set = ["LG", "LN", "LC"];
                        }
                        else if (align1 == "Chaotic") {
                            set = ["CG", "CN", "CE"];
                        }
                        else if (align1 == "Neutral") {
                            set = ["NG", "Unaligned", "NE"];
                        }
                        for (var i = 0; i < filterType.length; i++) {
                            if (filterType[i].Alignment == set[0] || filterType[i].Alignment == set[1] || filterType[i].Alignment == set[2]) {
                                filterAlignment.push(filterType[i]);
                            }
                        }
                    }
                    else{
                        console.log("in else3");
                        filterAlignment = filterType;
                    }
                    console.log("by alignment: " + filterAlignment.length);
                    var filterEnvironment = [];
                    if(environment != "Any" && filterAlignment.length > 1){
                        for(var i = 0; i < filterAlignment.length; i++){
                            var length = filterAlignment[i].Environment;
                            for(var j = 0; j < length.length; j++){
                                var temp = filterAlignment[i].Environment[j];
                                if(temp == environment){
                                    filterEnvironment.push(filterAlignment[i]);
                                }
                            }
                        }
                    }
                    else if(environment != "Any" && filterAlignment.length == 1){
                        for(var i = 0; i < filterAlignment[0].Environment.length; i++){
                            if(filterAlignment[0].Environment[i] == environment){
                                filterEnvironment.push(filterAlignment[0]);
                            }
                        }
                    }
                    else{
                        filterEnvironment = filterAlignment;
                    }
                    console.log("by Environment: "+filterEnvironment.length);

                    if(filterEnvironment.length != 0){
                        var random = Math.floor((Math.random()*(filterEnvironment.length)));
                        generated = filterEnvironment[random];
                        genName = generated.Name;
                        genCR = generated.Challenge;
                        genXP = generated.XP;
                        genPage = generated.Page;
                        console.log("generated: " + genName + ", " + generated.Alignment + ", " + generated.Size + ", " + generated.Type + ", {" + generated.Environment + "}");
                        var output = '<p class = "genOutput">' + 'Name: '+ genName+ '<br>'
                            + 'Challenge Rating: '+ genCR+ '<br>' + 'XP: '+ genXP+ '<br>' + 'Monster Manual Page# '+ genPage + '</p>';
                        document.getElementById("main").innerHTML ='<h3 class = "outputHeader">Encounter Generated </h3>' + output;
                        document.getElementById("encounterCanvas").innerHTML = document.getElementById("main").innerHTML;
                        return generated;
                    }
                    else{
                        alert('No such monster in database.');
                    }
                });
        }
        else {
            Monsters.orderByChild('Challenge')
                .startAt(CRrange.min)
                .endAt(CRrange.max)
                .once('value')
                .then(function (snapshot) {
                    snapshot.forEach(function (childSnapshot) {
                        filtered.push(childSnapshot.val());
                    });
                    console.log("by challenge: " + filtered.length);

                    var filterSize = [];
                    if(size !== "Any"){
                        for(var i = 0; i < filtered.length; i++){
                            if(filtered[i].Size == size){
                                filterSize.push(filtered[i]);
                            }
                        }
                    }
                    else{
                        filterSize = filtered;
                    }
                    console.log("by size: " + filterSize.length);

                    var filterType = [];
                    if(type != "Any"){
                        for(var i = 0; i < filterSize.length; i++){
                            if(filterSize[i].Type == type){
                                filterType.push(filterSize[i]);
                            }
                        }
                    }
                    else{
                        filterType = filterSize;
                    }
                    console.log("by type: " + filterType.length);

                    var filterAlignment = [];
                    if(alignment !== "Any" && alignment !== "Any evil" && alignment !== "Any good" && alignment !== "Any neutral"
                        && alignment !== "Lawful Any" && alignment !== "Chaotic Any" && alignment !== "Neutral Any"){
                        for(var i = 0; i < filterType.length; i++){
                            if(filterType[i].Alignment == alignment){
                                filterAlignment.push(filterType[i]);
                            }
                        }
                    }
                    else if(alignment == "Any evil" || alignment == "Any good" || alignment == "Any neutral"){
                        var set;
                        if(align2 == "Good"){
                            set = ["CG","NG","LG","any good"];
                        }
                        else if(align2 == "Evil"){
                            set = ["CE","NE","LE","Any evil"];
                        }
                        else if(align2 == "Neutral"){
                            set = ["CN","Unaligned","LN","N"];
                        }
                        for(var i = 0; i < filterType.length; i++){
                            if(filterType[i].Alignment == set[0] || filterType[i].Alignment == set[1] || filterType[i].Alignment == set[2] || filterType[i].Alignment == set[3]){
                                filterAlignment.push(filterType[i]);
                            }
                        }
                    }
                    else if(alignment == "Lawful Any" || alignment == "Chaotic Any" || alignment == "Neutral Any") {
                        var set;
                        if (align1 == "Lawful") {
                            set = ["LG", "LN", "LC"];
                        }
                        else if (align1 == "Chaotic") {
                            set = ["CG", "CN", "CE"];
                        }
                        else if (align1 == "Neutral") {
                            set = ["NG", "Unaligned", "NE"];
                        }
                        for (var i = 0; i < filterType.length; i++) {
                            if (filterType[i].Alignment == set[0] || filterType[i].Alignment == set[1] || filterType[i].Alignment == set[2]) {
                                filterAlignment.push(filterType[i]);
                            }
                        }
                    }
                    else{
                        filterAlignment = filterType;
                    }
                    console.log("by alignment: " + filterAlignment.length);
                    var filterEnvironment = [];
                    if(environment != "Any" && filterAlignment.length > 1){
                        for(var i = 0; i < filterAlignment.length; i++){
                            var length = filterAlignment[i].Environment;
                            for(var j = 0; j < length.length; j++){
                                var temp = filterAlignment[i].Environment[j];
                                if(temp == environment){
                                    filterEnvironment.push(filterAlignment[i]);
                                }
                            }
                        }
                    }
                    else if(environment != "Any" && filterAlignment.length == 1){
                        for(var i = 0; i < filterAlignment[0].Environment.length; i++){
                            if(filterAlignment[0].Environment[i] == environment){
                                filterEnvironment.push(filterAlignment[0]);
                            }
                        }
                    }
                    else{
                        filterEnvironment = filterAlignment;
                    }
                    console.log("by Environment: "+filterEnvironment.length);

                    if(filterEnvironment.length != 0){
                        var random = Math.floor((Math.random()*(filterEnvironment.length)));
                        generated = filterEnvironment[random];
                        genName = generated.Name;
                        genCR = generated.Challenge;
                        genXP = generated.XP;
                        genPage = generated.Page;
                        console.log("generated: " + genName + ", " + generated.Alignment + ", " + generated.Size + ", " + generated.Type + ", {" + generated.Environment + "}");
                        var output = '<p class = "genOutput">' + 'Name: '+ genName+ '<br>'
                            + 'Challenge Rating: '+ genCR+ '<br>' + 'XP: '+ genXP+ '<br>' + 'Monster Manual Page# '+ genPage + '</p>';
                        document.getElementById("main").innerHTML ='<h3 class = "outputHeader">Encounter Generated </h3>' + output;
                        document.getElementById("encounterCanvas").innerHTML = document.getElementById("main").innerHTML;
                        return generated;
                    }
                    else{
                        alert('No such monster in database.');
                    }
                });
        }

		resizeSideBar();
	}

    function CalculateChallenge(difficulty,players,level){
        var TMELmin;
        var TMELmax;
        var PEL = [
            1.0,
            1.5,
            2.5,
            3.0,
            5.0,
            6.0,
            7.0,
            8.0,
            9.0,
            10.0,
            11.0,
            12.0,
            13.0,
            14.0,
            16.0,
            18.0,
            20.0,
            22.0,
            24.0,
            26.0
        ];
        var TPEL = players*PEL[level-1];
        console.log("TPEL:"+TPEL);
        if(difficulty == "Any"){
            TMELmin = 0.0;
            TMELmax = 216.0;
        }
        if(difficulty == "Easy"){
            TMELmin = (.40)*TPEL;
            TMELmax = (.60)*TPEL;
        }
        else if(difficulty == "Medium"){
            TMELmin = (.60)*TPEL;
            TMELmax = (.80)*TPEL;
        }
        else if(difficulty == "Difficult"){
            TMELmin = (.80)*TPEL;
            TMELmax = TPEL;
        }
        else if(difficulty == "Deadly"){
            TMELmin = TPEL;
            TMELmax = 216.0;
        }
        var MEL = [
            {PEL: .33, CR: 0},
            {PEL: .66, CR: .125},
            {PEL: 1.0, CR: .25},
            {PEL: 1.5, CR: .5},
            {PEL: 2.0, CR: 1},
            {PEL: 4.0, CR: 2},
            {PEL: 6.0, CR: 3},
            {PEL: 8.0, CR: 4},
            {PEL: 11.0, CR: 5},
            {PEL: 13.0, CR: 6},
            {PEL: 15.0, CR: 7},
            {PEL: 18.0, CR: 8},
            {PEL: 21.0, CR: 9},
            {PEL: 24.0, CR: 10},
            {PEL: 28.0, CR: 11},
            {PEL: 32.0, CR: 12},
            {PEL: 36.0, CR: 13},
            {PEL: 40.0, CR: 14},
            {PEL: 44.0, CR: 15},
            {PEL: 48.0, CR: 16},
            {PEL: 52.0, CR: 17},
            {PEL: 56.0, CR: 18},
            {PEL: 60.0, CR: 19},
            {PEL: 64.0, CR: 20},
            {PEL: 76.0, CR: 21},
            {PEL: 88.0, CR: 22},
            {PEL: 104.0, CR: 23},
            {PEL: 120.0, CR: 24},
            {PEL: 136.0, CR: 25},
            {PEL: 152.0, CR: 26},
            {PEL: 168.0, CR: 27},
            {PEL: 184.0, CR: 28},
            {PEL: 200.0, CR: 29},
            {PEL: 216.0, CR: 30}
        ];
        var count = 0;
        var range ={
            min: 30,
            max: 0
        };
        for(var i = 0; i < MEL.length; i++){
            if(MEL[i].PEL >= TMELmin && MEL[i].PEL <= TMELmax){
                if(MEL[i].CR < range.min){
                    range.min = MEL[i].CR;
                }
                if(MEL[i].CR > range.max){
                    range.max = MEL[i].CR;
                }
                count++;
            }
        }
        console.log("min CR:"+range.min);
        console.log("max CR:"+range.max);
        return range;
    }

    function convertAlignment(align1, align2){
        var part1;
        var part2;
        var alignment;
        if (align1 == "Any"){
            part1 = "Any";
        }
        else if (align1 == "Neutral"){
            part1 = "N";
        }
        else if (align1 == "Chaotic"){
            part1 = "C";
        }
        else if (align1 == "Lawful"){
            part1 = "L";
        }

        if (align2 == "Any"){
            part2 = "Any"
        }
        else if (align2 == "Neutral"){
            part2 = "N";
        }
        else if (align2 == "Evil"){
            part2 = "E";
        }
        else if (align2 == "Good"){
            part2 = "G";
        }

        if(part1 == "Any" && part2 == "Any"){
            alignment = "Any";
        }
        else if(part1 != "Any" && part2 == "Any"){
            alignment = align1 + " Any";
        }
        else if(part1 == "N" && part2 == "N"){
            alignment = "Unaligned";
        }
        else if(part1 == "Any" && part2 != "Any"){
            alignment = part1+" "+align2.toLowerCase();
        }
        else{
            alignment = part1 + part2;
        }
        console.log("ConvertAlignment: " + align1 + " + " + align2 + " = " + alignment);
        return alignment;
    }
